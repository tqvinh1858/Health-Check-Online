// <auto-generated />
using System;
using BHEP.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BHEP.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614181008_Update_DeleteBehavior")]
    partial class Update_DeleteBehavior
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.AppointmentSymptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.HasKey("SymptomId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentSymptom", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Specialist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specialist", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.SpecialistSymptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.HasKey("SymptomId", "SpecialistId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("SpecialistSymptom", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Symptom", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ONum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogPhoto", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogRate", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogTopic", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("BlogTopic", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Major", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLike", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLike", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ReplyParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReplyParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reply", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.ReplyLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyLike", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Code", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.CoinTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMinus")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CoinTransaction", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Duration", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 15, 1, 10, 6, 347, DateTimeKind.Local).AddTicks(5385));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 15, 1, 10, 6, 347, DateTimeKind.Local).AddTicks(5702));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ProductRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ProductRate", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ProductTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TransactionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTransaction", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ServiceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRate", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ServiceTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTransaction", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.UserCode", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CodeId");

                    b.HasIndex("CodeId");

                    b.ToTable("UserCode", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.VoucherTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherTransaction", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeoLocation", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("JobApplication", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("GeoLocationId")
                        .HasColumnType("int");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GeoLocationId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.UserRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserRate", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVoucher", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.WorkProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WorkProfile", (string)null);
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Appointment", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Customer")
                        .WithMany("AppointmentCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Employee")
                        .WithMany("AppointmentEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.AppointmentSymptom", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Appointment", "Appointment")
                        .WithMany("AppointmentSymptoms")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Symptom", "Symptom")
                        .WithMany("AppointmentSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.SpecialistSymptom", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Specialist", "Specialist")
                        .WithMany("SpecialistsSymptom")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Symptom", "Symptom")
                        .WithMany("SpecialistSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Specialist");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.Blog", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogPhoto", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.BlogEntities.Blog", "Blog")
                        .WithMany("BlogPhotos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogRate", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.BlogEntities.Blog", "Blog")
                        .WithMany("BlogRates")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("BlogRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.BlogTopic", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.BlogEntities.Blog", "Blog")
                        .WithMany("BlogTopics")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.BlogEntities.Topic", "Topic")
                        .WithMany("BlogTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Comment", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.CommentLike", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.PostEntities.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Post", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Specialist", "Specialist")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Specialist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.PostLike", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Reply", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.PostEntities.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.PostEntities.Reply", "ReplyParent")
                        .WithMany()
                        .HasForeignKey("ReplyParentId");

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReplyParent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.ReplyLike", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.PostEntities.Reply", "Reply")
                        .WithMany("ReplyLikes")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("ReplyLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Code", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Codes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.CoinTransaction", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("CoinTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Duration", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Service", "Service")
                        .WithMany("Durations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Durations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Payment", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ProductRate", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Product", "Product")
                        .WithMany("ProductRates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithOne()
                        .HasForeignKey("BHEP.Domain.Entities.SaleEntities.ProductRate", "TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("ProductRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ProductTransaction", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Product", "Product")
                        .WithMany("ProductTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithMany("ProductTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ServiceRate", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Service", "Service")
                        .WithMany("ServiceRates")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithOne()
                        .HasForeignKey("BHEP.Domain.Entities.SaleEntities.ServiceRate", "TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("ServiceRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.ServiceTransaction", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Service", "Service")
                        .WithMany("ServiceTransactions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithMany("ServiceTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.UserCode", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Code", "Code")
                        .WithMany("UserCodes")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Code");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.VoucherTransaction", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.SaleEntities.CoinTransaction", "Transaction")
                        .WithMany("VoucherTransaction")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Voucher", "Voucher")
                        .WithMany("VoucherTransactions")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.JobApplication", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Customer")
                        .WithOne()
                        .HasForeignKey("BHEP.Domain.Entities.UserEntities.JobApplication", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.Schedule", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.User", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("BHEP.Domain.Entities.UserEntities.GeoLocation", "GeoLocation")
                        .WithOne("User")
                        .HasForeignKey("BHEP.Domain.Entities.UserEntities.User", "GeoLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Specialist", "Specialist")
                        .WithMany("Employees")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Appointment");

                    b.Navigation("GeoLocation");

                    b.Navigation("Role");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.UserRate", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.AppointmentEntities.Appointment", "Appointment")
                        .WithOne("UserRate")
                        .HasForeignKey("BHEP.Domain.Entities.UserEntities.UserRate", "AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Customer")
                        .WithMany("GivenRates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "Employee")
                        .WithMany("ReceivedRates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.UserVoucher", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.SaleEntities.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.WorkProfile", b =>
                {
                    b.HasOne("BHEP.Domain.Entities.Major", "Major")
                        .WithMany("WorkProfiles")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHEP.Domain.Entities.UserEntities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("BHEP.Domain.Entities.UserEntities.WorkProfile", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Appointment", b =>
                {
                    b.Navigation("AppointmentSymptoms");

                    b.Navigation("UserRate")
                        .IsRequired();
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Specialist", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Posts");

                    b.Navigation("SpecialistsSymptom");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.AppointmentEntities.Symptom", b =>
                {
                    b.Navigation("AppointmentSymptoms");

                    b.Navigation("SpecialistSymptoms");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.Blog", b =>
                {
                    b.Navigation("BlogPhotos");

                    b.Navigation("BlogRates");

                    b.Navigation("BlogTopics");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.BlogEntities.Topic", b =>
                {
                    b.Navigation("BlogTopics");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.Major", b =>
                {
                    b.Navigation("WorkProfiles");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Comment", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.PostEntities.Reply", b =>
                {
                    b.Navigation("ReplyLikes");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Code", b =>
                {
                    b.Navigation("UserCodes");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.CoinTransaction", b =>
                {
                    b.Navigation("ProductTransactions");

                    b.Navigation("ServiceTransactions");

                    b.Navigation("VoucherTransaction");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Product", b =>
                {
                    b.Navigation("ProductRates");

                    b.Navigation("ProductTransactions");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Service", b =>
                {
                    b.Navigation("Durations");

                    b.Navigation("ServiceRates");

                    b.Navigation("ServiceTransactions");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.SaleEntities.Voucher", b =>
                {
                    b.Navigation("UserVouchers");

                    b.Navigation("VoucherTransactions");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.GeoLocation", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BHEP.Domain.Entities.UserEntities.User", b =>
                {
                    b.Navigation("AppointmentCustomers");

                    b.Navigation("AppointmentEmployees");

                    b.Navigation("BlogRates");

                    b.Navigation("Blogs");

                    b.Navigation("Codes");

                    b.Navigation("CoinTransactions");

                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("Durations");

                    b.Navigation("GivenRates");

                    b.Navigation("Payments");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("ProductRates");

                    b.Navigation("Profile");

                    b.Navigation("ReceivedRates");

                    b.Navigation("Replies");

                    b.Navigation("ReplyLikes");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceRates");

                    b.Navigation("UserCodes");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
